def Node @expr @expr {|data, next|
    var ret = new Object
    ret var data = data
    ret var next = next
    ret}

def newObject {
LS}

def list @expr {|data|
    var ret = new Object
    ret var val = Node data null

    {
        def , @expr {|data|
            self val = (Node data (self val))
            self}
    }(ret)

    {def pr {
        var tmp = (self val)
        while {tmp != null} {
            print (tmp data)
            tmp = tmp next
        }
    }} (ret)
    ret}

var ret = list 8, 9, 10, 11, 12
print (ret val data)
print "-----------------"
ret pr

var ret = Node 3 null
